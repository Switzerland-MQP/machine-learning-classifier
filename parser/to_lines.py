""" Converts from the abstract syntax tree generated by the parser into a collection of Line objects, 
each representing one line of the original document, with annotations on what categories the lines belong to
"""
from parser.parser import Tag

document = []

def flag_lines(ast):
	global document	
	document = []

	for element in ast:
		if type(element) is str:
			handle_top_level_string(element)
		elif type(element) is Tag:
			if element.name == "Label":
				handle_label(element)
			else:
				raise Exception("Line Flagging error: encountered something that isn't a valid top level element| tag name: "+element.name)
	
		else:
			raise Exception("Line Flagging error: encountered something that isn't a valid top level element")
	
	return document

class Line:
	def __init__(self):
		self.text = ""
		self.categories = set()
		self.context = set()
	
	def __repr__(self):
		#return "Line("+self.text+"|"+str(list(self.categories))+"|"+str(list(self.context))+")"
		return str(list(self.categories)) + str(list(self.context)) + "| " + self.text

def get_current_line():
	if len(document) < 1:
		line = Line()
		document.append(line)
		return line
	
	return document[-1]

""" Appends the given string to the document, adding lines as appropriate.
Applies the given categories and contexts to lines touched if they are given.
"""
def append_document(string, categories=[], context=[]):
	#print("Appending document with string: ", string)
	#print("Categories: " + str(list(categories)) + "| Contexts: " + str(list(context)))

	line = get_current_line()
	if len(string)> 0:	
		line.categories.update(categories)
		line.context.update(context)

	for c in string:
		if c == '\n':
			#Don't add the current line if it's empty
			if len(line.text) < 2:
				document.pop()

			line = Line()
			document.append(line)
		
			line.categories.update(categories)
			line.context.update(context)
		else:
			line.text += c

def handle_top_level_string(string):		
	append_document(string, [], [])

def handle_label(label):
	for element in label.children:
		if type(element) is str:
			append_document(element, [], label.categories) #Categories used as context here
		elif type(element) is Tag:
			# We have a <data> tag
			append_document(element.children[0], label.categories, []) #label data lines as just categories, not context





